{"ast":null,"code":"var _jsxFileName = \"/Users/gracechen/Documents/2021ConcordiaBootcamp/project-GROUP-e-commerce/client/src/components/SearchBar.js\";\nimport React, { useState, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { ItemsContext } from \"./ItemsContext\";\nimport { useHistory } from \"react-router-dom\";\n\nconst SearchBar = () => {\n  const [input, setInput] = useState(\"\");\n  const {\n    items\n  } = useContext(ItemsContext);\n  const history = useHistory();\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const reset = () => {\n    setInput(\"\");\n  }; // go to the item detail page every time click on a prediction, and then empty the search bar\n\n\n  const handleSelect = itemId => {\n    history.push(`/item/${itemId}`);\n    reset();\n  }; // try to make an array with all predictions. enter more than 2 characters to trigger the filter and return the name of items that includes the input characters.\n\n\n  let matchedItems = [];\n\n  if (input.length >= 2) {\n    matchedItems = items.filter(suggestion => {\n      return suggestion.name.toLowerCase().includes(input.toLowerCase());\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(SearchInput, {\n    type: \"text\",\n    value: input,\n    onChange: handleChange,\n    placeholder: \"Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), matchedItems.length >= 1 && /*#__PURE__*/React.createElement(SuggestList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, matchedItems.map(suggestion => {\n    let index = suggestion.name.toLowerCase().indexOf(input.toLowerCase()); // before the prediction char is normal font weight, all the rest predictions are bold.\n\n    let normalText = suggestion.name.slice(0, index + input.length);\n    let boldText = suggestion.name.slice(index + input.length);\n    return /*#__PURE__*/React.createElement(SuggestItem, {\n      key: suggestion._id,\n      onClick: () => handleSelect(suggestion._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Span, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, normalText, /*#__PURE__*/React.createElement(Prediction, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, boldText)), /*#__PURE__*/React.createElement(Category, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 19\n      }\n    }, \" \", \"in \", /*#__PURE__*/React.createElement(Purple, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }\n    }, suggestion.category)));\n  }))), /*#__PURE__*/React.createElement(Clear, {\n    onClick: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, \"Clear\"));\n};\n\nexport default SearchBar;\nconst Wrapper = styled.div`\n  display: flex;\n\n  margin-top: 20px;\n`;\nconst SearchInput = styled.input`\n  background: var(--color-light-grey);\n  padding: 10px;\n  border-radius: 8px;\n  border: none;\n  width: 300px;\n  font-size: 18px;\n  margin-bottom: 15px;\n`;\nconst Search = styled.div`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n`;\nconst SuggestList = styled.ul`\n  margin: 8px 8px;\n\n  border-radius: 5px;\n  box-shadow: 0px 3px 10px 5px var(--color-dark-grey);\n  width: 400px;\n  padding: 10px;\n  background-color: white;\n  position: absolute;\n  top: 75px;\n  z-index: 200;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  color: var(--color-dark-grey);\n`;\nconst SuggestItem = styled.li`\n  padding: 10px 5px;\n  cursor: pointer;\n  transition: background-color 300ms ease-in-out;\n\n  &:hover,\n  & :active {\n    background-color: rgb(165, 226, 80, 30%);\n  }\n`;\nconst Span = styled.span``;\nconst Clear = styled.button`\n  width: 70px;\n  height: 35px;\n  border: 3px solid var(--color-lime);\n  border-radius: 15px;\n  padding: 0px;\n  color: var(--color-lime);\n  background-color: var(--color-dark-grey);\n  margin-top: 5px;\n  margin-left: -70px;\n  transition: transform 300ms ease-in-out;\n  text-align: center;\n  cursor: pointer;\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.1);\n  }\n`;\nconst Prediction = styled.span`\n  font-weight: 600;\n`;\nconst Category = styled.span`\n  font-style: italic;\n`;\nconst Purple = styled.span`\n  color: #9853c0;\n`;","map":{"version":3,"sources":["/Users/gracechen/Documents/2021ConcordiaBootcamp/project-GROUP-e-commerce/client/src/components/SearchBar.js"],"names":["React","useState","useContext","styled","ItemsContext","useHistory","SearchBar","input","setInput","items","history","handleChange","e","target","value","reset","handleSelect","itemId","push","matchedItems","length","filter","suggestion","name","toLowerCase","includes","map","index","indexOf","normalText","slice","boldText","_id","category","Wrapper","div","SearchInput","Search","SuggestList","ul","SuggestItem","li","Span","span","Clear","button","Prediction","Category","Purple"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport styled from \"styled-components\";\nimport { ItemsContext } from \"./ItemsContext\";\nimport { useHistory } from \"react-router-dom\";\n\nconst SearchBar = () => {\n  const [input, setInput] = useState(\"\");\n  const { items } = useContext(ItemsContext);\n  const history = useHistory();\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n  const reset = () => {\n    setInput(\"\");\n  };\n  // go to the item detail page every time click on a prediction, and then empty the search bar\n  const handleSelect = (itemId) => {\n    history.push(`/item/${itemId}`);\n    reset();\n  };\n  // try to make an array with all predictions. enter more than 2 characters to trigger the filter and return the name of items that includes the input characters.\n  let matchedItems = [];\n  if (input.length >= 2) {\n    matchedItems = items.filter((suggestion) => {\n      return suggestion.name.toLowerCase().includes(input.toLowerCase());\n    });\n  }\n\n  return (\n    <Wrapper>\n      <Search>\n        <SearchInput\n          type=\"text\"\n          value={input}\n          onChange={handleChange}\n          placeholder=\"Search\"\n        />\n        {/* when there is more than one item in the array, start to map them out and render */}\n        {matchedItems.length >= 1 && (\n          <SuggestList>\n            {/* try to get the input character's index on the prediction name */}\n            {matchedItems.map((suggestion) => {\n              let index = suggestion.name\n                .toLowerCase()\n                .indexOf(input.toLowerCase());\n              // before the prediction char is normal font weight, all the rest predictions are bold.\n              let normalText = suggestion.name.slice(0, index + input.length);\n              let boldText = suggestion.name.slice(index + input.length);\n              return (\n                <SuggestItem\n                  key={suggestion._id}\n                  onClick={() => handleSelect(suggestion._id)}\n                >\n                  <Span>\n                    {normalText}\n                    <Prediction>{boldText}</Prediction>\n                  </Span>\n                  <Category>\n                    {\" \"}\n                    in <Purple>{suggestion.category}</Purple>\n                  </Category>\n                </SuggestItem>\n              );\n            })}\n          </SuggestList>\n        )}\n      </Search>\n      <Clear onClick={reset}>Clear</Clear>\n    </Wrapper>\n  );\n};\n\nexport default SearchBar;\n\nconst Wrapper = styled.div`\n  display: flex;\n\n  margin-top: 20px;\n`;\nconst SearchInput = styled.input`\n  background: var(--color-light-grey);\n  padding: 10px;\n  border-radius: 8px;\n  border: none;\n  width: 300px;\n  font-size: 18px;\n  margin-bottom: 15px;\n`;\n\nconst Search = styled.div`\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst SuggestList = styled.ul`\n  margin: 8px 8px;\n\n  border-radius: 5px;\n  box-shadow: 0px 3px 10px 5px var(--color-dark-grey);\n  width: 400px;\n  padding: 10px;\n  background-color: white;\n  position: absolute;\n  top: 75px;\n  z-index: 200;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  color: var(--color-dark-grey);\n`;\nconst SuggestItem = styled.li`\n  padding: 10px 5px;\n  cursor: pointer;\n  transition: background-color 300ms ease-in-out;\n\n  &:hover,\n  & :active {\n    background-color: rgb(165, 226, 80, 30%);\n  }\n`;\nconst Span = styled.span``;\n\nconst Clear = styled.button`\n  width: 70px;\n  height: 35px;\n  border: 3px solid var(--color-lime);\n  border-radius: 15px;\n  padding: 0px;\n  color: var(--color-lime);\n  background-color: var(--color-dark-grey);\n  margin-top: 5px;\n  margin-left: -70px;\n  transition: transform 300ms ease-in-out;\n  text-align: center;\n  cursor: pointer;\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.1);\n  }\n`;\nconst Prediction = styled.span`\n  font-weight: 600;\n`;\nconst Category = styled.span`\n  font-style: italic;\n`;\nconst Purple = styled.span`\n  color: #9853c0;\n`;\n"]},"metadata":{},"sourceType":"module"}