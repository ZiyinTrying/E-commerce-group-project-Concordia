{"ast":null,"code":"var _jsxFileName = \"/Users/gracechen/Documents/Documents - Grace\\u2019s MacBook Pro/concordia-bootcamps/project-GROUP-e-commerce/client/src/components/ItemsContext.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nexport const ItemsContext = createContext(null);\nexport const ItemsProvider = ({\n  children\n}) => {\n  //variable to store data from fetch \"/items\"\n  const [items, setItems] = useState(null); //variable to store items that are being added in the cart\n\n  const [cartItems, setCartItems] = useState([]); //getting array with selected items from localStorage\n\n  const [currentCart, setCurrentCart] = useState(() => {\n    const cart = localStorage.getItem(\"cartItems\");\n    return cart !== null ? JSON.parse(cart) : [];\n  }); //variable to reRender when you add item to the cart\n\n  const [reRender, setReRender] = useState(false);\n  useEffect(() => {\n    const cart = localStorage.getItem(\"cartItems\");\n    cart !== null ? setCartItems(JSON.parse(cart)) : setCartItems([]);\n    cart !== null ? setCurrentCart(JSON.parse(cart)) : setCurrentCart([]);\n  }, [reRender]);\n  useEffect(() => {\n    fetch('/items').then(res => res.json()).then(data => {\n      setItems(data.data);\n    }).catch(err => {\n      console.log(\"error\");\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(ItemsContext.Provider, {\n    value: {\n      items,\n      setItems,\n      cartItems,\n      setCartItems,\n      currentCart,\n      setCurrentCart,\n      reRender,\n      setReRender\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Users/gracechen/Documents/Documents - Graceâ€™s MacBook Pro/concordia-bootcamps/project-GROUP-e-commerce/client/src/components/ItemsContext.js"],"names":["React","createContext","useState","useEffect","ItemsContext","ItemsProvider","children","items","setItems","cartItems","setCartItems","currentCart","setCurrentCart","cart","localStorage","getItem","JSON","parse","reRender","setReRender","fetch","then","res","json","data","catch","err","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AAEA,OAAO,MAAMC,YAAY,GAAGH,aAAa,CAAC,IAAD,CAAlC;AAEP,OAAO,MAAMI,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC7C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC,CAF6C,CAI7C;;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C,CAL6C,CAO3C;;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,MAAM;AACjD,UAAMW,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAb;AACA,WAAOF,IAAI,KAAK,IAAT,GAAgBG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAhB,GAAmC,EAA1C;AACH,GAH6C,CAA9C,CAR2C,CAa3C;;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAb;AACAF,IAAAA,IAAI,KAAK,IAAT,GAAgBH,YAAY,CAACM,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAD,CAA5B,GAAiDH,YAAY,CAAC,EAAD,CAA7D;AACAG,IAAAA,IAAI,KAAK,IAAT,GAAgBD,cAAc,CAACI,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAD,CAA9B,GAAmDD,cAAc,CAAC,EAAD,CAAjE;AACH,GAJQ,EAIN,CAACM,QAAD,CAJM,CAAT;AAMAf,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,KAAK,CAAC,QAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AACVhB,MAAAA,QAAQ,CAACgB,IAAI,CAACA,IAAN,CAAR;AACH,KAJD,EAKCC,KALD,CAKQC,GAAD,IAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,KAPD;AAQH,GATQ,EASN,EATM,CAAT;AAWA,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAC1BrB,MAAAA,KAD0B;AAE1BC,MAAAA,QAF0B;AAG1BC,MAAAA,SAH0B;AAI1BC,MAAAA,YAJ0B;AAK1BC,MAAAA,WAL0B;AAM1BC,MAAAA,cAN0B;AAO1BM,MAAAA,QAP0B;AAQ1BC,MAAAA;AAR0B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUKb,QAVL,CADJ;AAcH,CA/CM","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nexport const ItemsContext = createContext(null);\n\nexport const ItemsProvider = ({ children }) => {\n  //variable to store data from fetch \"/items\"\n  const [items, setItems] = useState(null);\n\n  //variable to store items that are being added in the cart\n  const [cartItems, setCartItems] = useState([]);\n\n    //getting array with selected items from localStorage\n    const [currentCart, setCurrentCart] = useState(() => { \n        const cart = localStorage.getItem(\"cartItems\");\n        return cart !== null ? JSON.parse(cart) : [];    \n    }) \n    \n    //variable to reRender when you add item to the cart\n    const [reRender, setReRender] = useState(false);\n\n    useEffect(() => {\n        const cart = localStorage.getItem(\"cartItems\");\n        cart !== null ? setCartItems(JSON.parse(cart)) : setCartItems([]); \n        cart !== null ? setCurrentCart(JSON.parse(cart)) : setCurrentCart([]); \n    }, [reRender])\n\n    useEffect(() => {\n        fetch('/items')\n        .then(res => res.json())\n        .then(data => {\n            setItems(data.data)\n        })\n        .catch((err) => {\n            console.log(\"error\");\n        });\n    }, []);\n    \n    return (\n        <ItemsContext.Provider value={{\n            items,\n            setItems,\n            cartItems,\n            setCartItems,\n            currentCart,\n            setCurrentCart,\n            reRender, \n            setReRender\n        }}>\n            {children}\n        </ItemsContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}